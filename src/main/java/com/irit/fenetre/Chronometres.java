/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.irit.fenetre;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JButton;
import javax.swing.Timer;

import com.irit.fenetre.upnp.ChronoService;
import org.fourthline.cling.model.meta.LocalService;

/**
 *
 * @author Abdourahamane Ly
 */
public final class Chronometres extends javax.swing.JFrame {

    private static int heure, minute, seconde;
    private final int delais = 1000;
    private final int tempsMax = 30;
    private static LocalService<ChronoService> chronometreService;

      public void activate(JButton... boutons) {
        for (JButton bout : boutons) {
            bout.setEnabled(true);
        }
    }

    public enum Etats{
          STOP, START
    }

    Etats etatChronometre;

    public void deactivate(JButton... boutons) {
        for (JButton bout : boutons) {
            bout.setEnabled(false);
        }
    }

    public void afficherChronometre() {
        labelHeure.setText(heure + ":" + minute + ":" + seconde);
    }

    /**
     * Creates new form Chronometres
     * @param chronometreService
     */
    public Chronometres(LocalService<ChronoService> chronometreService) {
        initComponents();
        initChronometre(chronometreService);
    }
    

    public void initChronometre(LocalService<ChronoService> chronoService) {
        heure = minute = seconde = 0;
        activate(boutonStart);
        etatChronometre = Etats.STOP;
        deactivate(boutonRemiseAZero);
        this.chronometreService = chronoService;
        this.chronometreService.getManager().getImplementation().getPropertyChangeSupport().addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if(evt.getPropertyName().equals("status")){

                    if(etatChronometre.equals(Etats.START)){
                        timer.stop();
                        etatChronometre = Etats.STOP;
                    } else {
                        timer.start();
                        etatChronometre = Etats.START;
                    }
                }
            }
        });
    }

    public void afficherChrono() {
        labelHeure.setText(heure + ":" + minute + ":" + seconde);
    }
    private final Timer timer = new Timer(delais, new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            seconde++;
            //si le chronometre atteind le temps maximal, il envoi un evenement Ã  la lampe pour quelle s'eteinge
            if(seconde >= tempsMax) {
                timer.stop();
                System.out.println("stop");
                etatChronometre = Etats.STOP;
                chronometreService.getManager().getImplementation().envoyerTimeOut();
            }

            if (seconde == 60) {
                seconde = 0;
                minute++;
            }
            if (minute == 60) {
                minute = 0;
                heure++;
            }
            if(heure  == 24){
                initChronometre(chronometreService);//reinitialisation du chronometre
            }
            //il faudra gerer quand atteind 24h
            afficherChrono();
        }
    });

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boutonRemiseAZero = new javax.swing.JButton();
        boutonStart = new javax.swing.JButton();
        labelHeure = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chronometre");
        setAlwaysOnTop(true);
        setName("chronometre"); // NOI18N

        boutonRemiseAZero.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        boutonRemiseAZero.setText("Remise a zero");
        boutonRemiseAZero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonRemiseAZeroActionPerformed(evt);
            }
        });

        boutonStart.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        boutonStart.setText("Start");
        boutonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonStartActionPerformed(evt);
            }
        });

        labelHeure.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelHeure.setText("0:0:0");
        labelHeure.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boutonRemiseAZero)
                .addGap(14, 14, 14)
                .addComponent(boutonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelHeure, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelHeure, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boutonRemiseAZero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boutonStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void boutonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonStartActionPerformed
        if (boutonStart.getText().compareTo("Start") == 0) {
            boutonStart.setText("Stop");
            activate(boutonStart); //il devient le bouton stop
            deactivate(boutonRemiseAZero);
            timer.start();
            etatChronometre = Etats.START;
        } else if (boutonStart.getText().compareTo("Stop") == 0) {
            boutonStart.setText("Start");
            timer.stop();
            if(seconde >= tempsMax) {
                timer.stop();
                System.out.println("stop");
                etatChronometre = Etats.STOP;
                chronometreService.getManager().getImplementation().envoyerTimeOut();
            }
            activate(boutonStart);
            activate(boutonRemiseAZero);
        }
    }//GEN-LAST:event_boutonStartActionPerformed

    private void boutonRemiseAZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonRemiseAZeroActionPerformed
        if (boutonStart.getText().compareTo("Start") == 0) {
            boutonStart.setText("Start");
            initChronometre(chronometreService);
            activate(boutonStart);
            deactivate(boutonRemiseAZero);
            afficherChronometre();
        }
    }//GEN-LAST:event_boutonRemiseAZeroActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chronometres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chronometres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chronometres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chronometres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               new Chronometres(chronometreService).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boutonRemiseAZero;
    private javax.swing.JButton boutonStart;
    private javax.swing.JLabel labelHeure;
    // End of variables declaration//GEN-END:variables
}
